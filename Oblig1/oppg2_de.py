# -*- coding: utf-8 -*-# OPPGAVE D OG Eimport matplotlibimport matplotlib.pyplot as plt # For plottingimport numpy as np # For arraysimport scipy.linalg as la # For linear algebradef simulate_fwd_euler(T,N,t0,p0):    """    INPUT:        T (float): End time.        N (integer): Number of time steps.        x0 (np.array): NumPy array of size 2, initial condition.        A (np.array): NumPy array of size 2x2, system matrix.    OUTPUT:        y (np.array): NumPy array of size Nx2, numerical solution at each time step.    """    # Initialize solution array    t= np.zeros((N,1), dtype=float)    p = np.zeros((N,1), dtype=float)    t2 = np.zeros((N,1), dtype=float)    p2 = np.zeros((N,1), dtype=float)    H = np.zeros((N,1), dtype=float)    H2 = np.zeros((N,1), dtype=float)    tid = np.zeros((N,1), dtype=float)    t[0] = t0; p[0] = p0    t2[0] = t0; p2[0] = p0    h = T/N    H[0] = 0.5 * p0**2 - np.cos(t0)    # Do each time step:    for i in range(N-1):        t[i+1] = t[i] + h * p[i]         # Return solution array (do/dt)        p[i+1] = p[i] + h * (- np.sin(t[i])) # Return solution array (dp/dt)        p2[i+1] = p2[i] - h * (np.sin(t2[i])) # Return solution array (dp/dt)        t2[i+1] = t2[i] + h * p2[i+1]         # Return solution array (do/dt)        H[i+1] = 0.5 * p[i+1]**2 - np.cos(t[i+1])        H2[i+1] = 0.5 * p2[i+1]**2 - np.cos(t2[i+1])        tid[i+1] = tid[i] + h    return t,p,H,H2,tid,t2,p2t0 = 0; N = 100; T = 10.# Dplt.figure(1)plt.subplot(211)for k in range(0,9):    p0 = k/2.    t,p,H,H2,tid,t2,p2 = simulate_fwd_euler(T,N,t0,p0)    plt.plot(t,p,'r')plt.title(r'($\theta,p)$ og $E_n$ mot tid ')plt.xlabel(r'$\theta$')plt.ylabel(('p'))plt.subplot(212)for k in range(0,9):    p0 = k/2.    t,p,H,H2,tid,t2,p2 = simulate_fwd_euler(T,N,t0,p0)    plt.plot(tid,H,'r')plt.ylabel(r'$E_n$')plt.xlabel(('tid'))#Eplt.figure(2)plt.subplot(211)for k in range(0,9):    p0 = k/2.    t,p,H,H2,tid,t2,p2 = simulate_fwd_euler(T,N,t0,p0)    plt.plot(t,p,'r',t2,p2,'b')plt.title(r'($\theta,p)$ med nye ($\theta,p_{i+1})$ og $E_n$ mot tid med den nye $E_n$ ')plt.xlabel(r'$\theta$')plt.ylabel(('p'))plt.subplot(212)for k in range(0,9):    p0 = k/2.    t,p,H,H2,tid,t2,p2 = simulate_fwd_euler(T,N,t0,p0)    plt.plot(tid,H,'r',tid,H2,'b')plt.ylabel(r'$E_n$')plt.xlabel(('tid'))plt.show()