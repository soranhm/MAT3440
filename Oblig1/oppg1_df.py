# -*- coding: utf-8 -*-# OPPGAVE ! D og Fimport matplotlibimport matplotlib.pyplot as plt # For plottingimport numpy as np # For arraysimport scipy.linalg as la # For linear algebradef f1(v,w,a,b,I):    return v - (v**3)/3. - w + Idef f2(v,w,a,b,I):    return v + a - b*wdef simulate_fwd_euler(T,N,h,a,b,I,v0,w0):    """    INPUT:        T (float): End time.        N (integer): Number of time steps.        x0 (np.array): NumPy array of size 2, initial condition.        A (np.array): NumPy array of size 2x2, system matrix.    OUTPUT:        y (np.array): NumPy array of size Nx2, numerical solution at each time step.    """    # Initialize solution array    y = np.zeros((N,1), dtype=float)    z = np.zeros((N,1), dtype=float)    y[0] = v0    z[0] = w0    # Do each time step:    for i in range(N-1):        # Execute fwd_euler from earlier        y[i+1] = y[i] + h * f1(y[i],z[i],a,b,I) # Return solution array        z[i+1] = z[i] + h * f2(y[i],z[i],a,b,I) # Return solution array    return y,za = 0.7; b = 0.8I = a/bI2 = 0.2N = 1000; T = 100. ; h = T/N;t = np.linspace(0, T, N)# Dv0 = 0; w0 = 0;v2,w2 = simulate_fwd_euler(T,N,h,a,b,I,v0,w0)v3,w3 = simulate_fwd_euler(T,N,h,a,b,I2,v0,w0)print 'Sink: I = ', I2,' (a/b), Source: I = ',Iplt.figure(1)plt.subplot(211)plt.plot(t,v2,'b')plt.title('Plotting av (t,v) og (v,w). - Source -')plt.subplot(212)plt.plot(v2,w2,'r')plt.figure(2)plt.subplot(211)plt.plot(t,v3,'b')plt.title('Plotting av (t,v) og (v,w). - Sink -')plt.subplot(212)plt.plot(v3,w3,'r')# Fplt.figure(3)v_0 = np.linspace(-2,2,10)w_0 = np.linspace(-2,2,10)b2 = [1.1,1.6,2.1,2.6,2.9]I3 = 0; a2 = 0; b2 =1.8for i,j in zip(v_0, w_0):    for b3 in np.linspace(1.1,2.9,10):        punkt2 = ((3*(b-1))/b)**(1/2);        wrt = punkt2/b3;        color = ''; leg = ''        v4,w4 = simulate_fwd_euler(T,N,h,a2,b3,I3,i,j)        if abs(punkt2-v4[-1])<abs(-punkt2-v4[-1]):            color = 'r' # punkt 1        else:            color = 'b' # punkt 2        plt.plot(v4,w4,color,label='v0 = %s, w0 = %s' % (i,j))        plt.plot(v4[-1],w4[-1],'>',color = color)        plt.plot(punkt2,wrt,'rx',-punkt2,-wrt,'bx')        #plt.plot(v4[0],w4[0],'s')plt.title('Sink 1 : rod, Sink 2: blaa')#plt.legend(loc=4)plt.show()